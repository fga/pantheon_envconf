<?php
/**
 * Pantehon dev/test/live config
 */

/**
 * Implementation of hook_boot().
 */
function pantheon_envconf_boot() {
	$env = '';
	$site_env = '';
	//if (isset($GLOBALS['_SERVER']['PANTHEON_ENVIRONMENT'])) $env = $GLOBALS['_SERVER']['PANTHEON_ENVIRONMENT'];
	if (isset($_SERVER['PANTHEON_ENVIRONMENT'])) $env = $_SERVER['PANTHEON_ENVIRONMENT'];

	/*
	 * Check the Pantheon environment variable first, if it has a value the operators will
	 * short circuit and the preg_match()s will never be evaluated. This is good since pregs
	 * are slow.
	 *
	 */
	if ($env == 'live') {
		$site_env = 'live';
	}
	elseif ($env == 'test') {
		$site_env = 'test';
	}
	elseif ($env == 'dev') {
		$site_env = 'dev';
	}
	// we suppose that if it's not on Pantheon, it's local, but also explicity catch .local domains
	elseif (($env == '') ||
	(preg_match('/[\w\.\-_]*\.local:{0,1}(?=\d{0,})/', $_SERVER['HTTP_HOST']) === 1)) {
	  $env = $site_env = 'local';
	}
	/*
	 * it would be nice to only inject configuration when the corresponding module is present
	 * but to minimize processing in hook_boot() we will simply inject the configuration blindly
	 * as we would if we were overriding these values in settings.php

	 $list = module_list(TRUE);
	 // Perform module-specific variable alterations
	 if (isset($list['google_analytics'])) pantheon_envconf_cas($site_env);
	 if (isset($list['cas_attributes'])) pantheon_envconf_cas_attributes($site_env);

	 */
	pantheon_envconf($site_env);
	//pantheon_envconf_preprocess_html($site_env);
}


/**
 * we set some variable configurations based on our environment
 */
function pantheon_envconf($env) {
	global $conf;
	$site_name = $conf['site_name'];
	
	switch($env) {
	  
	  // set variables per environment
		case "local":
			$conf['site_name'] = $site_name . ' - LOCAL';
			break;
		case "dev":
  		$conf['site_name'] = $site_name . ' - DEV';
  		break;
		case "test":
		  $conf['site_name'] = $site_name . ' - TEST';
			break;
		case "live":
			break;

	}
}

function pantheon_envconf_preprocess_html(&$vars) {
  
  //$vars['classes_array'][] = 'local';
  //$vars['attributes_array']['class'][] = 'local';
  		
}


/**
 * Implements hook_form_alter().
 *
 * Let users know that certain admin form values are "locked" by this module
 */
 
/*
function pantheon_envconf_form_alter(&$form, &$form_state, $form_id) {
	switch ($form_id) {
		case "cas_admin_settings":
			$form['server']['cas_server']['#disabled'] = TRUE;
			$form['server']['cas_server']['#description'] = t('<em><strong>Setting locked by pantheon_envconf.module</strong></em><br />') . $form['server']['cas_server']['#description'];
			break;
		case "cas_attributes_admin_settings":
			$form['#after_build'][] = 'pantheon_envconf_cas_attributes_after_build';

			break;
		case "ldap_servers_admin_form":
			$form['server']['sid']['#disabled'] = TRUE;
			$form['server']['sid']['#description'] = t('<em><strong>Setting locked by pantheon_envconf.module</strong></em><br />') . $form['server']['sid']['#description'];
			break;
	}
}

function pantheon_envconf_cas_attributes_after_build($form, &$form_state) {
	$form['cas_attributes']['ldap']['server']['#disabled'] = TRUE; //FIXME
	$form['cas_attributes']['ldap']['server']['#description'] = t('<em><strong>Setting locked by pantheon_envconf.module</strong></em><br />') . $form['cas_attributes']['ldap']['server']['#description'];
	return $form;
}
*/
